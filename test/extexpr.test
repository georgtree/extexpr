package require tcltest
namespace import ::tcltest::*
interp alias {} @ {} lindex
interp alias {} = {} expr
package require extexpr

### List operations tests
test maxlProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {maxl($y)}]
} -result 100 -cleanup {
    unset y
}
test minlProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {minl($y)}]
} -result 0 -cleanup {
    unset y
}

### mul tests
test mulProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {mul($y,2)}]
} -result {0.0 2.0 8.0 18.0 32.0 50.0 72.0 98.0 128.0 162.0 200.0} -cleanup {
    unset y
}
test mulProcTest-2 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {mul(2,$y)}]
} -result {0.0 2.0 8.0 18.0 32.0 50.0 72.0 98.0 128.0 162.0 200.0} -cleanup {
    unset y
}
test mulProcTest-3 {} -body {
    return [= {mul(2,2)}]
} -result 4.0
test mullProcTest-4 {} -setup {
    set x [list 0 1 4 9 16 25 36 49 64 81 100]
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {mul($x,$y)}]
} -result {0.0 1.0 16.0 81.0 256.0 625.0 1296.0 2401.0 4096.0 6561.0 10000.0} -cleanup {
    unset x y
}
test mulProcTest-5 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    catch {= {mul($y)}} errorStr
    return $errorStr
} -result {wrong # args: should be one of the following:
  tcl::mathfunc::mul list list
  tcl::mathfunc::mul list value
  tcl::mathfunc::mul value list
  tcl::mathfunc::mul value value
  or use [expr] syntax: mul(arg1,arg2) with any of the argument combinations above} -cleanup {
    unset y errorStr
}
test mulProcTest-6 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    catch {= {mul($y,{a})}} errorStr
    return $errorStr
} -result {expected floating-point number but got "a"} -cleanup {
    unset y errorStr
}
test mulProcTest-7 {} -setup {
    set y [list 0 1 4 v 16 25 36 49 64 81 100]
} -body {
    catch {= {mul($y,2)}} errorStr
    return $errorStr
} -result {expected floating-point number but got "v"} -cleanup {
    unset y
}
test mulProcTest-8 {} -setup {
    set y [list 0 1 4 8 16 25 36 49 64 81 100]
} -body {
    catch {= {mul($y,[list])}} errorStr
    return $errorStr
} -result {Empty list is not allowed as scalar input} -cleanup {
    unset y
}

### sum tests
test sumProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {sum($y,2)}]
} -result {2.0 3.0 6.0 11.0 18.0 27.0 38.0 51.0 66.0 83.0 102.0} -cleanup {
    unset y
}
test sumProcTest-2 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {sum(2,$y)}]
} -result {2.0 3.0 6.0 11.0 18.0 27.0 38.0 51.0 66.0 83.0 102.0} -cleanup {
    unset y
}
test sumProcTest-3 {} -body {
    return [= {sum(2,2)}]
} -result 4.0
test sumProcTest-4 {} -setup {
    set x [list 0 1 4 9 16 25 36 49 64 81 100]
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {sum($x,$y)}]
} -result {0.0 2.0 8.0 18.0 32.0 50.0 72.0 98.0 128.0 162.0 200.0} -cleanup {
    unset x y
}

### sub tests
test subProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {sub($y,2)}]
} -result {-2.0 -1.0 2.0 7.0 14.0 23.0 34.0 47.0 62.0 79.0 98.0} -cleanup {
    unset y
}
test subProcTest-2 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {sub(2,$y)}]
} -result {2.0 1.0 -2.0 -7.0 -14.0 -23.0 -34.0 -47.0 -62.0 -79.0 -98.0} -cleanup {
    unset y
}
test subProcTest-3 {} -body {
    return [= {sub(2,2)}]
} -result 0.0
test subProcTest-4 {} -setup {
    set x [list 0 1 4 9 16 25 36 49 64 81 101]
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {sub($x,$y)}]
} -result {0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0} -cleanup {
    unset x y
}

### div tests
test divProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {div($y,2)}]
} -result {0.0 0.5 2.0 4.5 8.0 12.5 18.0 24.5 32.0 40.5 50.0} -cleanup {
    unset y
}
test divProcTest-2 {} -setup {
    set y [list 1 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {div(2,$y)}]
} -result {2.0 2.0 0.5 0.2222222222222222 0.125 0.08 0.05555555555555555 0.04081632653061224 0.03125\
0.024691358024691357 0.02} -cleanup {
    unset y
}
test divProcTest-3 {} -body {
    return [= {div(2,2)}]
} -result 1.0
test divProcTest-4 {} -setup {
    set x [list 0 1 4 9 16 25 36 49 64 81 101]
    set y [list 1 1 4 9 13 25 36 45 64 81 100]
} -body {
    return [= {div($x,$y)}]
} -result {0.0 1.0 1.0 1.0 1.2307692307692308 1.0 1.0 1.0888888888888888 1.0 1.0 1.01} -cleanup {
    unset x y
}
test divlscProcTest-5 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    catch {= {div($y,0)}} errorStr
    return $errorStr
} -result {Division by zero} -cleanup {
    unset y errorStr
}
test divlscProcTest-6 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    catch {= {div(1,$y)}} errorStr
    return $errorStr
} -result {Division by zero} -cleanup {
    unset y errorStr
}

### pow tests
test powProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {pow($y,2)}]
} -result {0.0 1.0 16.0 81.0 256.0 625.0 1296.0 2401.0 4096.0 6561.0 10000.0} -cleanup {
    unset y
}
test powProcTest-2 {} -setup {
    set y [list 1 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {pow(2,$y)}]
} -result {2.0 2.0 16.0 512.0 65536.0 33554432.0 68719476736.0 562949953421312.0 1.844674407370955e+19\
2.4178516392292583e+24 1.2676506002282294e+30} -cleanup {
    unset y
}
test powProcTest-3 {} -body {
    return [= {pow(2,2)}]
} -result 4.0
test powProcTest-4 {} -setup {
    set x [list 0 1 4 9 16]
    set y [list 1 1 4 9 13]
} -body {
    return [= {pow($x,$y)}]
} -result {0.0 1.0 256.0 387420489.0 4503599627370496.0} -cleanup {
    unset x y
}
test powProcTest-5 {} -setup {
    set y [list 0 1 4 -9 16 25 36 49 64 81 100]
} -body {
    catch {= {pow($y,0.5)}} errorStr
    return $errorStr
} -result {Negative base cannot be raised to a non-integer power} -cleanup {
    unset y errorStr
}
test powProcTest-6 {} -setup {
    set y [list 0 1 4 0.5 16 25 36 49 64 81 100]
} -body {
    catch {= {pow(-2,$y)}} errorStr
    return $errorStr
} -result {Negative base cannot be raised to a non-integer power} -cleanup {
    unset y errorStr
}


### List commands test
test lindexProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {li($y,2)}]
} -result 4 -cleanup {
    unset y
}
test lrangeProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {lrange($y,2,6)}]
} -result {4 9 16 25 36} -cleanup {
    unset y
}
test llengthProcTest-1 {} -setup {
    set y [list 0 1 4 9 16 25 36 49 64 81 100]
} -body {
    return [= {llength($y)}]
} -result 11 -cleanup {
    unset y
}
### Math functions tests
test logbProcTest-1 {} -body {
    return [= {logb(16,2)}]
} -result 4.0

test logbProcTest-2 {} -body {
    return [= {logb(16,3)}]
} -result 2.5237190142858297

test logbProcTest-3 {} -body {
    return [= {logb(0,3)}]
} -result -Inf

cleanupTests
